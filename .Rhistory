tr(
lapply(c("Bias", variances), th)
)
)
))
res_wide <- res_wide %>% remove_rownames %>% column_to_rownames(var="bias")
footer <- "Most likely bias and variance parameters for sampling beta distributions for Statsbomb (red) and Understat (blue) data. Table values are the average percentage of goal paths lying within the 95% confidence interval around cumulative model xG. Goal paths are generated based on hypothetical, true xG value. The confidence interval is symmetric around the cumulative xG value of the noisy model. Noise xG values are sampled from a beta distribution with mean equal to true xG (+ potential bias) and variance as indicated in the table. Given that even naive xG models are unbiased over large samples by definition (across multiple teams, leagues and seasons), the bias is only applied to 25% of the sample, (-1)*bias to another 25% and 50% remain unbiased."
dt <- datatable(res_wide,
container = sketch,
rownames = TRUE,
options = list(dom = 't'),
caption = htmltools::tags$caption(style = 'caption-side: bottom; text-align: center;', 'Table 2: ', htmltools::em(footer))) %>%
formatPercentage(c(1, 2, 3, 4, 5, 6, 7, 8), 1) %>%
formatStyle(c(0), `border-right` = "solid 1px") %>%
formatStyle(c('0.005', '0.01'), border = styleInterval(c(0.93, 0.94), c('auto', '2px solid #DC2228', 'auto'))) %>%
formatStyle(c('0.01', '0.02', '0.03'), border = styleInterval(c(0.60, 0.85), c('auto', '2px solid #91bfdb', 'auto')))
dt
#widgetframe::frameWidget(dt)
blogdown:::serve_site()
View(xg_sample_for_plot)
library(tidyverse) # dataframe manipulation
library(dbplyr) # database access
library(DBI) # database access
library(r2d3) # evaluate D3 directly from R
library(viridis) # color scheme for pass polar
library(cowplot) # plotting the player portrait
library(broom) # getting kmeans results
library(patchwork) # combining plots
library(ggrepel) # pretty labels for scatter plot
library(r2d3) # d3 support
library(gganimate) # animation of charts
library(magick) # combining gifs
library(glue) # markdown in chart titles
library(ggtext) # markdown in chart titles
library(scales) # percent formating in charts
library(DT) # pretty tables
library(widgetframe) # pretty tables
source("https://raw.githubusercontent.com/RobWHickman/Rteta/master/R/standardize_coordinates.R")
xg_df <- read_csv("../data/xg_comp_2.csv", col_types = cols())
xg_df <- xg_df %>%
mutate(xg_no_model = 0.11*shots) %>%
mutate(upper_sb = xg_statsbomb + sqrt(shots/3),
lower_sb = xg_statsbomb - sqrt(shots/3),
upper_us = xg_understat + sqrt(shots/3),
lower_us = xg_understat - sqrt(shots/3),
upper_nm = xg_no_model + sqrt(shots/3),
lower_nm = xg_no_model - sqrt(shots/3)) %>%
mutate(in_range_sb = if_else(goals <= upper_sb & goals >= lower_sb, 1, 0),
in_range_us = if_else(goals <= upper_us & goals >= lower_us, 1, 0),
in_range_nm = if_else(goals <= upper_nm & goals >= lower_nm, 1, 0)) %>%
mutate(xg_over_sb = goals - xg_statsbomb,
xg_over_us = goals - xg_understat,
xg_over_nm = goals - xg_no_model)
xg_df <- read_csv("../data/xg_comp_2.csv", col_types = cols())
xg_df <- xg_df %>%
mutate(xg_no_model = 0.11*shots) %>%
mutate(upper_sb = xg_statsbomb + sqrt(shots/3),
lower_sb = xg_statsbomb - sqrt(shots/3),
upper_us = xg_understat + sqrt(shots/3),
lower_us = xg_understat - sqrt(shots/3),
upper_nm = xg_no_model + sqrt(shots/3),
lower_nm = xg_no_model - sqrt(shots/3)) %>%
mutate(in_range_sb = if_else(goals <= upper_sb & goals >= lower_sb, 1, 0),
in_range_us = if_else(goals <= upper_us & goals >= lower_us, 1, 0),
in_range_nm = if_else(goals <= upper_nm & goals >= lower_nm, 1, 0)) %>%
mutate(xg_over_sb = goals - xg_statsbomb,
xg_over_us = goals - xg_understat,
xg_over_nm = goals - xg_no_model)
table <- xg_df %>% summarize(mean_sb = mean(in_range_sb),
mean_us = mean(in_range_us),
mean_nm = mean(in_range_nm),
xg_over_sb = mean(xg_over_sb),
xg_over_us = mean(xg_over_us),
xg_over_nm = mean(xg_over_nm))
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(colspan = 3, 'Pecentage within 95% confidence interval'),
th(colspan = 3, 'Average Difference Between Goals and xG (By Season)')
),
tr(
lapply(rep(c('Statsbomb', 'Understat', 'No Model'), 2), th)
)
)
))
footer <- "Left: Percentage of team seasons for which cumulative goals lie within the 95% confidence interval around cumulative xG. Lower percentages are driven by higher modeling noise that move the cumulative xG value and therefore the mid-point of the range which causes more goal paths to lie outside. Right: Average difference between cumulative goals and xG for all team seasons. This highlights that on average the xG measure gets things right for all three models but also that the averaging masks the noise we observe for individual seasons."
dt <- datatable(table, container = sketch, rownames = FALSE, options = list(dom = 't'),
caption = htmltools::tags$caption(style = 'caption-side: bottom; text-align: center;', 'Table 1: ', htmltools::em(footer))) %>%
formatPercentage(c(1, 2, 3), 1) %>%
formatRound(c(4, 5, 6), digits = 1)
widgetframe::frameWidget(dt)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Desktop/statsbomb_free_data.sqlite")
shots_sb <- tbl(con, "events") %>%
filter(type.name == "Shot") %>%
filter(possession_team.name == "Barcelona") %>%
select(c("type.name", "possession_team.name", "shot.statsbomb_xg", "location_x", "location_y",
"shot.type.name", "shot.body_part.name", "play_pattern.name", "shot.outcome.name", "match_id")) %>%
collect()
matches <- tbl(con, "matches") %>%
select(c("match_id", "season.season_name")) %>%
distinct() %>%
collect()
DBI::dbDisconnect(con)
shots_sb <- shots_sb %>%
standardize_statsbomb_x(cols = c("location_x")) %>%
standardize_statsbomb_y(cols = c("location_y")) %>%
rowwise() %>%
mutate(header = if_else(shot.body_part.name == "Head", 1, 0)) %>%
mutate(from_corner = if_else(play_pattern.name == "From Corner", 1, 0)) %>%
mutate(from_fk = if_else(play_pattern.name == "From Free Kick", 1, 0)) %>%
mutate(penalty = if_else(shot.type.name == "Penalty", 1, 0)) %>%
mutate(direct_fk = 0) %>%
mutate(fast_break = if_else(play_pattern.name == "From Counter", 1, 0)) %>%
mutate(isGoal = ifelse(shot.outcome.name == "Goal", 1, 0)) %>%
filter(direct_fk == 0) %>%
filter(penalty == 0) %>%
mutate(simple_xg = compute_xg(location_x, location_y, header, from_corner, from_fk, direct_fk, fast_break, penalty)) %>%
ungroup()
shots_sb <- left_join(shots_sb, matches, by = "match_id") %>%
filter(season.season_name >= "2007/2008")
shots_sb_plot <- shots_sb %>%
group_by(season.season_name) %>%
mutate(shots = row_number()) %>%
mutate(cum_sb_xg = cumsum(shot.statsbomb_xg)) %>%
mutate(cum_simple_xg = cumsum(simple_xg)) %>%
mutate(`cumulative goals/xG` = cumsum(isGoal)) %>%
ungroup()
ggplot(shots_sb_plot) +
geom_line(aes(x = shots, y = `cumulative goals/xG`), color = "#000000") +
geom_line(aes(x = shots, y = cum_sb_xg), color = "#DC2228") +
geom_line(aes(x = shots, y = cum_simple_xg), color = "#91bfdb") +
facet_wrap(~season.season_name) +
labs(title = glue::glue("<b style = 'color:#91bfdb'>Naive</b> xG models consistently underestimate Barcelona's <b style = 'color:#000000'>cumulative goals</b>."),
subtitle = glue::glue("<b style = 'color:#DC2228'>Statsbomb's</b> model tracks much closer.")
) +
theme_minimal() +
theme(plot.title = element_markdown(size = 12),
plot.subtitle = element_markdown(size = 12))
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(league == "Germany") %>%
filter(season %in% c("2017/2018", "2018/2019", "2019/2020")) %>%
collect()
match_ids <- unique(matches$match_id)
shots <- tbl(con, "events") %>%
filter(match_id %in% match_ids) %>%
filter(teamId %in% c(37)) %>%
filter(isShot == 1) %>%
collect()
DBI::dbDisconnect(con)
shots <- shots %>%
rowwise() %>%
mutate(header = if_else(grepl("Head", qualifiers), 1, 0)) %>%
mutate(from_corner = if_else(grepl("FromCorner", qualifiers), 1, 0)) %>%
mutate(from_fk = if_else(grepl("SetPiece", qualifiers), 1, 0)) %>%
mutate(direct_fk = if_else(grepl("DirectFreekick", qualifiers), 1, 0)) %>%
mutate(penalty = if_else(grepl("Penalty", qualifiers), 1, 0)) %>%
mutate(fast_break = if_else(grepl("FastBreak", qualifiers), 1, 0)) %>%
mutate(isGoal = ifelse(isGoal == "1", 1, 0)) %>%
filter(direct_fk == 0) %>%
filter(penalty == 0) %>%
standardize_opta_x(cols = c("location_x")) %>%
standardize_opta_y(cols = c("location_y")) %>%
mutate(xg = compute_xg(location_x, location_y, header, from_corner, from_fk, direct_fk, fast_break, penalty)) %>%
ungroup()
df <- data.frame(
x = 0.5,
y = 4,
label = "Distribution of likely, true xG values for <b style = 'color:#DC2228'>Statsbomb (bias: 0.005, variance: 0.005)</b> and <b style = 'color:#91bfdb'>Understat (bias: 0.025, variance: 0.02)</b> xG models"
)
mu <- 0.25 + 0.000
sigma_2 <- 0.005
alpha <- mu*(mu*(1-mu)/sigma_2 - 1)
beta <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
mu <- 0.25 + 0.00
sigma_2 <- 0.02
alpha_2 <- mu*(mu*(1-mu)/sigma_2 - 1)
beta_2 <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
ggplot(data.frame(x = seq(0.02, 1, 0.01)), aes(x)) +
geom_vline(xintercept = 0.25, linetype = "dashed") +
stat_function(fun = function(x) dbeta(x, alpha, beta), color = "#DC2228", size = 0.5) +
stat_function(fun = function(x) dbeta(x, alpha_2, beta_2), color = "#91bfdb", size = 0.5) +
geom_textbox(
data = df,
aes(x, y, label = label),
width = grid::unit(2, "in"),
height = grid::unit(1.5, "in"),
hjust = 0, vjust = 1, size = 4,
) +
xlab("xG") +
labs(title = "Schematic representation of modeling error.",
subtitle = "Distribution of likely, true xG values around imperfect model estimate of 0.25.") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
df <- data.frame(
x = 0.5,
y = 4,
label = "Distribution of likely, true xG values for <b style = 'color:#DC2228'>Statsbomb (bias: 0.005, variance: 0.005)</b> and <b style = 'color:#91bfdb'>Understat (bias: 0.025, variance: 0.02)</b> xG models"
)
mu <- 0.25 + 0.000
sigma_2 <- 0.005
alpha <- mu*(mu*(1-mu)/sigma_2 - 1)
beta <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
mu <- 0.25 + 0.00
sigma_2 <- 0.02
alpha_2 <- mu*(mu*(1-mu)/sigma_2 - 1)
beta_2 <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
ggplot(data.frame(x = seq(0.02, 1, 0.01)), aes(x)) +
geom_vline(xintercept = 0.25, linetype = "dashed") +
stat_function(fun = function(x) dbeta(x, alpha, beta), color = "#DC2228", size = 0.5) +
stat_function(fun = function(x) dbeta(x, alpha_2, beta_2), color = "#91bfdb", size = 0.5) +
geom_textbox(
data = df,
aes(x, y, label = label),
width = grid::unit(2, "in"),
height = grid::unit(1.5, "in"),
hjust = 0, vjust = 1, size = 4,
) +
xlab("xG") +
labs(title = "Schematic representation of modeling error.",
subtitle = "Distribution of likely, true xG values around imperfect model estimate of 0.25.") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
df <- data.frame(
x = 0.5,
y = 4,
label = "Distribution of likely, true xG values for <b style = 'color:#DC2228'>Statsbomb (bias: 0.005, variance: 0.005)</b> and <b style = 'color:#91bfdb'>Understat (bias: 0.025, variance: 0.02)</b> xG models"
)
mu <- 0.25 + 0.000
sigma_2 <- 0.005
alpha <- mu*(mu*(1-mu)/sigma_2 - 1)
beta <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
mu <- 0.25 + 0.00
sigma_2 <- 0.01
alpha_2 <- mu*(mu*(1-mu)/sigma_2 - 1)
beta_2 <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
ggplot(data.frame(x = seq(0.02, 1, 0.01)), aes(x)) +
geom_vline(xintercept = 0.25, linetype = "dashed") +
stat_function(fun = function(x) dbeta(x, alpha, beta), color = "#DC2228", size = 0.5) +
stat_function(fun = function(x) dbeta(x, alpha_2, beta_2), color = "#91bfdb", size = 0.5) +
geom_textbox(
data = df,
aes(x, y, label = label),
width = grid::unit(2, "in"),
height = grid::unit(1.5, "in"),
hjust = 0, vjust = 1, size = 4,
) +
xlab("xG") +
labs(title = "Schematic representation of modeling error.",
subtitle = "Distribution of likely, true xG values around imperfect model estimate of 0.25.") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
df <- data.frame(
x = 0.5,
y = 4,
label = "Distribution of likely, true xG values for <b style = 'color:#DC2228'>Statsbomb (bias: 0.005, variance: 0.005)</b> and <b style = 'color:#91bfdb'>Understat (bias: 0.025, variance: 0.02)</b> xG models"
)
mu <- 0.25 + 0.000
sigma_2 <- 0.005
alpha <- mu*(mu*(1-mu)/sigma_2 - 1)
beta <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
mu <- 0.25 + 0.00
sigma_2 <- 0.02
alpha_2 <- mu*(mu*(1-mu)/sigma_2 - 1)
beta_2 <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
ggplot(data.frame(x = seq(0.02, 1, 0.01)), aes(x)) +
geom_vline(xintercept = 0.25, linetype = "dashed") +
stat_function(fun = function(x) dbeta(x, alpha, beta), color = "#DC2228", size = 0.5) +
stat_function(fun = function(x) dbeta(x, alpha_2, beta_2), color = "#91bfdb", size = 0.5) +
geom_textbox(
data = df,
aes(x, y, label = label),
width = grid::unit(2, "in"),
height = grid::unit(1.5, "in"),
hjust = 0, vjust = 1, size = 4,
) +
xlab("xG") +
labs(title = "Schematic representation of modeling error.",
subtitle = "Distribution of likely, true xG values around imperfect model estimate of 0.25.") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
df <- data.frame(
x = 0.5,
y = 4,
label = "Distribution of likely, true xG values for <b style = 'color:#DC2228'>Statsbomb (bias: 0.005, variance: 0.005)</b> and <b style = 'color:#91bfdb'>Understat (bias: 0.025, variance: 0.02)</b> xG models"
)
mu <- 0.25 + 0.000
sigma_2 <- 0.01
alpha <- mu*(mu*(1-mu)/sigma_2 - 1)
beta <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
mu <- 0.25 + 0.00
sigma_2 <- 0.02
alpha_2 <- mu*(mu*(1-mu)/sigma_2 - 1)
beta_2 <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
ggplot(data.frame(x = seq(0.02, 1, 0.01)), aes(x)) +
geom_vline(xintercept = 0.25, linetype = "dashed") +
stat_function(fun = function(x) dbeta(x, alpha, beta), color = "#DC2228", size = 0.5) +
stat_function(fun = function(x) dbeta(x, alpha_2, beta_2), color = "#91bfdb", size = 0.5) +
geom_textbox(
data = df,
aes(x, y, label = label),
width = grid::unit(2, "in"),
height = grid::unit(1.5, "in"),
hjust = 0, vjust = 1, size = 4,
) +
xlab("xG") +
labs(title = "Schematic representation of modeling error.",
subtitle = "Distribution of likely, true xG values around imperfect model estimate of 0.25.") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
noise_sample <- function(mu, sigma_2){
alpha <- mu*(mu*(1-mu)/sigma_2 - 1)
beta <- (1-mu)*(mu*(1-mu)/sigma_2 - 1)
if(sigma_2 < mu*(1-mu)){
sample <- rbeta(1, alpha, beta)
} else{
sample <- mu
}
sample
}
biases <- c(0, 0.005, 0.01, 0.02, 0.03)
variances <- c(0, 0.001, 0.005, 0.01, 0.02, 0.03, 0.05)
cases <- crossing(biases, variances)
res_simulations <- list()
set.seed(5)
for(k in 1:10){
ret_cases <- list()
for(j in 1:nrow(cases)){
bias = cases$biases[[j]]
variance = cases$variances[[j]]
df_list <- list()
xg_sample <- as.data.frame(sample(shots$xg, 450, replace = TRUE))
colnames(xg_sample) <- c("xg")
sims <- list()
for(i in 1:300){
if(variance < 0.000000001){
if(i <= 30){
xg_sample <- xg_sample %>% rowwise() %>% mutate(xg_noise = xg + bias)
} else if(i >= 270){
xg_sample <- xg_sample %>% rowwise() %>% mutate(xg_noise = xg - bias)
} else{
xg_sample <- xg_sample %>% rowwise() %>% mutate(xg_noise = xg)
}
} else {
if(i <= 30){
xg_sample <- xg_sample %>% rowwise() %>% mutate(xg_noise = noise_sample(xg + bias, variance))
} else if(i >= 270){
xg_sample <- xg_sample %>% rowwise() %>% mutate(xg_noise = noise_sample(xg - bias, variance))
} else{
xg_sample <- xg_sample %>% rowwise() %>% mutate(xg_noise = noise_sample(xg, variance))
}
}
xg_sample <- xg_sample %>%
rowwise() %>%
mutate(goals = rbinom(1, 1, xg)) %>%
ungroup()
sim_noise <- xg_sample %>%
summarize(cum_xg = sum(xg), cum_goals = sum(goals), cum_xg_noise = sum(xg_noise)) %>%
mutate(upper = cum_xg_noise + sqrt(450/3), lower = cum_xg_noise - sqrt(450/3)) %>%
mutate(within = if_else((cum_goals <= upper) & (cum_goals >= lower), 1, 0))
sims[[i]] <- sim_noise
}
res_case <- bind_rows(sims) %>%
summarize(true_xg = mean(cum_xg), noise_xg = mean(cum_xg_noise), goals = mean(cum_goals), within = mean(within)) %>%
mutate(bias = bias, variance = variance)
ret_cases[[j]] <- res_case
}
res <- bind_rows(ret_cases)
res_simulations[[k]] <- res %>% mutate(run = k)
}
final <- bind_rows(res_simulations)
final <- final %>% group_by(bias, variance) %>% summarize(true_xg = mean(true_xg),
noise_xg = mean(noise_xg),
goals = mean(goals),
within = mean(within),
bias = mean(bias),
variance = mean(variance))
res_wide <- final %>% pivot_wider(-c("true_xg", "noise_xg", "goals"), names_from = "variance", values_from = "within")
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 1, ''),
th(colspan = 8, 'Variance'),
),
tr(
lapply(c("Bias", variances), th)
)
)
))
res_wide <- res_wide %>% remove_rownames %>% column_to_rownames(var="bias")
footer <- "Most likely bias and variance parameters for sampling beta distributions for Statsbomb (red) and Understat (blue) data. Table values are the average percentage of goal paths lying within the 95% confidence interval around cumulative model xG. Goal paths are generated based on hypothetical, true xG value. The confidence interval is symmetric around the cumulative xG value of the noisy model. Noise xG values are sampled from a beta distribution with mean equal to true xG (+ potential bias) and variance as indicated in the table. Given that even naive xG models are unbiased over large samples by definition (across multiple teams, leagues and seasons), the bias is only applied to 25% of the sample, (-1)*bias to another 25% and 50% remain unbiased."
dt <- datatable(res_wide,
container = sketch,
rownames = TRUE,
options = list(dom = 't'),
caption = htmltools::tags$caption(style = 'caption-side: bottom; text-align: center;', 'Table 2: ', htmltools::em(footer))) %>%
formatPercentage(c(1, 2, 3, 4, 5, 6, 7, 8), 1) %>%
formatStyle(c(0), `border-right` = "solid 1px") %>%
formatStyle(c('0.005', '0.01'), border = styleInterval(c(0.93, 0.94), c('auto', '2px solid #DC2228', 'auto'))) %>%
formatStyle(c('0.01', '0.02', '0.03'), border = styleInterval(c(0.60, 0.85), c('auto', '2px solid #91bfdb', 'auto')))
widgetframe::frameWidget(dt)
datatable(res_wide,
container = sketch,
rownames = TRUE,
options = list(dom = 't'),
caption = htmltools::tags$caption(style = 'caption-side: bottom; text-align: center;', 'Table 2: ', htmltools::em(footer))) %>%
formatPercentage(c(1, 2, 3, 4, 5, 6, 7, 8), 1) %>%
formatStyle(c(0), `border-right` = "solid 1px") %>%
formatStyle(c('0.005', '0.01'), border = styleInterval(c(0.93, 0.94), c('auto', '2px solid #DC2228', 'auto'))) %>%
formatStyle(c('0.01', '0.02', '0.03'), border = styleInterval(c(0.60, 0.85), c('auto', '2px solid #91bfdb', 'auto')))
xg_df <- read_csv("../data/xg_comp.csv", col_types = cols())
xg_df <- xg_df %>%
mutate(xg_no_model = 0.11*shots) %>%
mutate(upper_sb = xg_statsbomb + sqrt(shots/3),
lower_sb = xg_statsbomb - sqrt(shots/3),
upper_us = xg_understat + sqrt(shots/3),
lower_us = xg_understat - sqrt(shots/3),
upper_nm = xg_no_model + sqrt(shots/3),
lower_nm = xg_no_model - sqrt(shots/3)) %>%
mutate(in_range_sb = if_else(goals <= upper_sb & goals >= lower_sb, 1, 0),
in_range_us = if_else(goals <= upper_us & goals >= lower_us, 1, 0),
in_range_nm = if_else(goals <= upper_nm & goals >= lower_nm, 1, 0)) %>%
mutate(xg_over_sb = goals - xg_statsbomb,
xg_over_us = goals - xg_understat,
xg_over_nm = goals - xg_no_model)
xg_df <- read_csv("../data/xg_comp.csv", col_types = cols())
xg_df <- xg_df %>%
mutate(xg_no_model = 0.11*shots) %>%
mutate(upper_sb = xg_statsbomb + sqrt(shots/3),
lower_sb = xg_statsbomb - sqrt(shots/3),
upper_us = xg_naive + sqrt(shots/3),
lower_us = xg_naive - sqrt(shots/3),
upper_nm = xg_no_model + sqrt(shots/3),
lower_nm = xg_no_model - sqrt(shots/3)) %>%
mutate(in_range_sb = if_else(goals <= upper_sb & goals >= lower_sb, 1, 0),
in_range_us = if_else(goals <= upper_us & goals >= lower_us, 1, 0),
in_range_nm = if_else(goals <= upper_nm & goals >= lower_nm, 1, 0)) %>%
mutate(xg_over_sb = goals - xg_statsbomb,
xg_over_us = goals - xg_naive,
xg_over_nm = goals - xg_no_model)
table <- xg_df %>% summarize(mean_sb = mean(in_range_sb),
mean_us = mean(in_range_us),
mean_nm = mean(in_range_nm),
xg_over_sb = mean(xg_over_sb),
xg_over_us = mean(xg_over_us),
xg_over_nm = mean(xg_over_nm))
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(colspan = 3, 'Pecentage within 95% confidence interval'),
th(colspan = 3, 'Average Difference Between Goals and xG (By Season)')
),
tr(
lapply(rep(c('Statsbomb', 'Understat', 'No Model'), 2), th)
)
)
))
footer <- "Left: Percentage of team seasons for which cumulative goals lie within the 95% confidence interval around cumulative xG. Lower percentages are driven by higher modeling noise that move the cumulative xG value and therefore the mid-point of the range which causes more goal paths to lie outside. Right: Average difference between cumulative goals and xG for all team seasons. This highlights that on average the xG measure gets things right for all three models but also that the averaging masks the noise we observe for individual seasons."
dt <- datatable(table, container = sketch, rownames = FALSE, options = list(dom = 't'),
caption = htmltools::tags$caption(style = 'caption-side: bottom; text-align: center;', 'Table 1: ', htmltools::em(footer))) %>%
formatPercentage(c(1, 2, 3), 1) %>%
formatRound(c(4, 5, 6), digits = 1)
widgetframe::frameWidget(dt)
xg_df <- read_csv("../data/xg_comp.csv", col_types = cols())
xg_df <- xg_df %>%
mutate(xg_no_model = 0.11*shots) %>%
mutate(upper_sb = xg_statsbomb + sqrt(shots/3),
lower_sb = xg_statsbomb - sqrt(shots/3),
upper_us = xg_naive + sqrt(shots/3),
lower_us = xg_naive - sqrt(shots/3),
upper_nm = xg_no_model + sqrt(shots/3),
lower_nm = xg_no_model - sqrt(shots/3)) %>%
mutate(in_range_sb = if_else(goals <= upper_sb & goals >= lower_sb, 1, 0),
in_range_us = if_else(goals <= upper_us & goals >= lower_us, 1, 0),
in_range_nm = if_else(goals <= upper_nm & goals >= lower_nm, 1, 0)) %>%
mutate(xg_over_sb = goals - xg_statsbomb,
xg_over_us = goals - xg_naive,
xg_over_nm = goals - xg_no_model)
table <- xg_df %>% summarize(mean_sb = mean(in_range_sb),
mean_us = mean(in_range_us),
mean_nm = mean(in_range_nm),
xg_over_sb = mean(xg_over_sb),
xg_over_us = mean(xg_over_us),
xg_over_nm = mean(xg_over_nm))
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(colspan = 3, 'Pecentage within 95% confidence interval'),
th(colspan = 3, 'Average Difference Between Goals and xG (By Season)')
),
tr(
lapply(rep(c('Statsbomb', 'Naive', 'No Model'), 2), th)
)
)
))
footer <- "Left: Percentage of team seasons for which cumulative goals lie within the 95% confidence interval around cumulative xG. Lower percentages are driven by higher modeling noise that move the cumulative xG value and therefore the mid-point of the range which causes more goal paths to lie outside. Right: Average difference between cumulative goals and xG for all team seasons. This highlights that on average the xG measure gets things right for all three models but also that the averaging masks the noise we observe for individual seasons."
dt <- datatable(table, container = sketch, rownames = FALSE, options = list(dom = 't'),
caption = htmltools::tags$caption(style = 'caption-side: bottom; text-align: center;', 'Table 1: ', htmltools::em(footer))) %>%
formatPercentage(c(1, 2, 3), 1) %>%
formatRound(c(4, 5, 6), digits = 1)
widgetframe::frameWidget(dt)
blogdown:::serve_site()
blogdown:::serve_site()
