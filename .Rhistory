rowwise() %>%
mutate(big_chance = if_else(grepl("BigChance", qualifiers), 1, 0)) %>%
mutate(header = if_else(grepl("Head", qualifiers), 1, 0)) %>%
mutate(from_corner = if_else(grepl("FromCorner", qualifiers), 1, 0)) %>%
mutate(from_fk = if_else(grepl("SetPiece", qualifiers), 1, 0)) %>%
mutate(direct_fk = if_else(grepl("DirectFreekick", qualifiers), 1, 0)) %>%
mutate(penalty = if_else(grepl("Penalty", qualifiers), 1, 0)) %>%
mutate(assisted = if_else(grepl("Assisted", qualifiers), 1, 0)) %>%
mutate(intentional_assist = if_else(grepl("IntentionalAssist", qualifiers), 1, 0)) %>%
mutate(fast_break = if_else(grepl("FastBreak", qualifiers), 1, 0)) %>%
ungroup() %>%
select(-qualifiers) %>%
filter(header == 0 & from_corner == 0 & from_fk == 0 & direct_fk == 0)
shots_ext
distance <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- abs(50 - y_pos)*y_meters/100
distance <- sqrt(x_shift*x_shift + y_shift*y_shift)
}
goal_angle <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- (50 - y_pos)*y_meters/100
angle <- atan((7.32*x_shift)/(x_shift*x_shift + y_shift*y_shift - (7.32/2)*(7.32/2)))
angle <- ifelse(angle < 0, angle + pi, angle)
angle_degrees <- angle*180/pi
}
shots_ext <- shots_ext %>%
rowwise() %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) %>% # based on available goal mouth
ungroup()
shots_ext$is_goal <- factor(shots_ext$is_goal, levels = c("1", "0"))
set.seed(seed = 1972)
train_test_split <- initial_split(data = shots_ext, prop = 0.80)
train_data <- train_test_split %>% training()
test_data  <- train_test_split %>% testing()
xg_recipe <-
recipe(is_goal ~ distance + angle + location_x + location_y, data = train_data) %>%
update_role(location_x, location_y, new_role = "ID")
summary(xg_recipe)
model <- logistic_reg() %>%
set_engine("glm")
xg_wflow <-
workflow() %>%
add_model(model) %>%
add_recipe(xg_recipe)
xg_wflow
xg_fit <-
xg_wflow %>%
fit(data = train_data)
xg_fit %>%
pull_workflow_fit() %>%
tidy()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
artificial_shots <- crossing(location_x = seq(50, 100, by = 0.5), location_y = seq(0, 100, by = 0.5)) %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) # angle based on available goal mouth
data_to_plot <- predict(xg_fit, artificial_shots, type = "prob") %>%
bind_cols(artificial_shots) %>%
rename("xG" = ".pred_1")
View(data_to_plot)
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1")
library(dbplyr) # database access
library(DBI) # database access
library(tidyverse) # dataframe manipulation
library(tidymodels) # data processing and modeling
source("../data/pitch_plots.r") # helper function to plot the pitch
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(league %in% c("Germany", "England", "Spain")) %>%
filter(season %in% c("2016/2017", "2015/2016", "2014/2015")) %>%
collect()
DBI::dbDisconnect(con)
match_ids <- unique(matches$match_id)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
shots <- tbl(con, "events") %>%
filter(match_id %in% match_ids) %>%
filter(isShot == 1) %>%
collect()
DBI::dbDisconnect(con)
shots_ext <- shots %>%
mutate(isGoal = as.numeric(isGoal)) %>%
mutate(isGoal = if_else(is.na(isGoal), 0, isGoal)) %>%
rename(is_goal = isGoal) %>%
select(location_x, location_y, is_goal, qualifiers) %>%
filter(location_x > 50) %>%
rowwise() %>%
mutate(big_chance = if_else(grepl("BigChance", qualifiers), 1, 0)) %>%
mutate(header = if_else(grepl("Head", qualifiers), 1, 0)) %>%
mutate(from_corner = if_else(grepl("FromCorner", qualifiers), 1, 0)) %>%
mutate(from_fk = if_else(grepl("SetPiece", qualifiers), 1, 0)) %>%
mutate(direct_fk = if_else(grepl("DirectFreekick", qualifiers), 1, 0)) %>%
mutate(penalty = if_else(grepl("Penalty", qualifiers), 1, 0)) %>%
mutate(assisted = if_else(grepl("Assisted", qualifiers), 1, 0)) %>%
mutate(intentional_assist = if_else(grepl("IntentionalAssist", qualifiers), 1, 0)) %>%
mutate(fast_break = if_else(grepl("FastBreak", qualifiers), 1, 0)) %>%
ungroup() %>%
select(-qualifiers) %>%
filter(header == 0 & from_corner == 0 & from_fk == 0 & direct_fk == 0)
distance <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- abs(50 - y_pos)*y_meters/100
distance <- sqrt(x_shift*x_shift + y_shift*y_shift)
}
goal_angle <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- (50 - y_pos)*y_meters/100
angle <- atan((7.32*x_shift)/(x_shift*x_shift + y_shift*y_shift - (7.32/2)*(7.32/2)))
angle <- ifelse(angle < 0, angle + pi, angle)
angle_degrees <- angle*180/pi
}
shots_ext <- shots_ext %>%
rowwise() %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) %>% # angle based on available goal mouth
ungroup()
shots_ext$is_goal <- factor(shots_ext$is_goal, levels = c("1", "0"))
set.seed(seed = 1972)
train_test_split <- initial_split(data = shots_ext, prop = 0.80)
train_data <- train_test_split %>% training()
test_data  <- train_test_split %>% testing()
xg_recipe <-
recipe(is_goal ~ distance + angle + location_x + location_y, data = train_data) %>%
update_role(location_x, location_y, new_role = "ID")
model <- logistic_reg() %>%
set_engine("glm")
xg_wflow <-
workflow() %>%
add_model(model) %>%
add_recipe(xg_recipe)
xg_fit <-
xg_wflow %>%
fit(data = train_data)
artificial_shots <- crossing(location_x = seq(50, 100, by = 0.5), location_y = seq(0, 100, by = 0.5)) %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) # angle based on available goal mouth
data_to_plot <- predict(xg_fit, artificial_shots, type = "prob") %>%
bind_cols(artificial_shots) %>%
rename("xG" = ".pred_1")
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1")
xg_pred <- xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1")
xg_pred <- xg_pred %>%
metrics(truth = is_goal, xG) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0)))
xg_pred <- xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0), levels = c("1", "0")))
xg_pred <- xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred
xg_pred %>%
conf_mat(truth = is_goal, is_goal_pred) %>%
pluck(1) %>%
as_tibble() %>%
ggplot(aes(Prediction, Truth, alpha = n)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = n), colour = "white", alpha = 1, size = 8)
View(xg_pred)
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred %>%
conf_mat(truth = is_goal, is_goal_pred) %>%
pluck(1) %>%
as_tibble() %>%
ggplot(aes(Prediction, Truth, alpha = n)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = n), colour = "white", alpha = 1, size = 8)
library(dbplyr) # database access
library(DBI) # database access
library(tidyverse) # dataframe manipulation
library(tidymodels) # data processing and modeling
source("../data/pitch_plots.r") # helper function to plot the pitch
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(league %in% c("Germany", "England", "Spain", "Italy", "France")) %>%
filter(season %in% c("2016/2017", "2015/2016", "2014/2015")) %>%
collect()
DBI::dbDisconnect(con)
match_ids <- unique(matches$match_id)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
shots <- tbl(con, "events") %>%
filter(match_id %in% match_ids) %>%
filter(isShot == 1) %>%
collect()
DBI::dbDisconnect(con)
shots_ext <- shots %>%
mutate(isGoal = as.numeric(isGoal)) %>%
mutate(isGoal = if_else(is.na(isGoal), 0, isGoal)) %>%
rename(is_goal = isGoal) %>%
select(location_x, location_y, is_goal, qualifiers) %>%
filter(location_x > 50) %>%
rowwise() %>%
mutate(big_chance = if_else(grepl("BigChance", qualifiers), 1, 0)) %>%
mutate(header = if_else(grepl("Head", qualifiers), 1, 0)) %>%
mutate(from_corner = if_else(grepl("FromCorner", qualifiers), 1, 0)) %>%
mutate(from_fk = if_else(grepl("SetPiece", qualifiers), 1, 0)) %>%
mutate(direct_fk = if_else(grepl("DirectFreekick", qualifiers), 1, 0)) %>%
mutate(penalty = if_else(grepl("Penalty", qualifiers), 1, 0)) %>%
mutate(assisted = if_else(grepl("Assisted", qualifiers), 1, 0)) %>%
mutate(intentional_assist = if_else(grepl("IntentionalAssist", qualifiers), 1, 0)) %>%
mutate(fast_break = if_else(grepl("FastBreak", qualifiers), 1, 0)) %>%
ungroup() %>%
select(-qualifiers) %>%
filter(header == 0 & from_corner == 0 & from_fk == 0 & direct_fk == 0)
distance <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- abs(50 - y_pos)*y_meters/100
distance <- sqrt(x_shift*x_shift + y_shift*y_shift)
}
goal_angle <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- (50 - y_pos)*y_meters/100
angle <- atan((7.32*x_shift)/(x_shift*x_shift + y_shift*y_shift - (7.32/2)*(7.32/2)))
angle <- ifelse(angle < 0, angle + pi, angle)
angle_degrees <- angle*180/pi
}
shots_ext <- shots_ext %>%
rowwise() %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) %>% # angle based on available goal mouth
ungroup()
shots_ext$is_goal <- factor(shots_ext$is_goal, levels = c("1", "0"))
set.seed(seed = 1972)
train_test_split <- initial_split(data = shots_ext, prop = 0.80)
train_data <- train_test_split %>% training()
test_data  <- train_test_split %>% testing()
xg_recipe <-
recipe(is_goal ~ distance + angle + location_x + location_y, data = train_data) %>%
update_role(location_x, location_y, new_role = "ID")
model <- logistic_reg() %>%
set_engine("glm")
xg_wflow <-
workflow() %>%
add_model(model) %>%
add_recipe(xg_recipe)
xg_fit <-
xg_wflow %>%
fit(data = train_data)
artificial_shots <- crossing(location_x = seq(50, 100, by = 0.5), location_y = seq(0, 100, by = 0.5)) %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) # angle based on available goal mouth
data_to_plot <- predict(xg_fit, artificial_shots, type = "prob") %>%
bind_cols(artificial_shots) %>%
rename("xG" = ".pred_1")
pitch <- create_opta_ShotMap(grass_colour = "grey15", line_colour = "#8F8F8F", background_colour = "grey10", goal_colour = "#000000") +
geom_tile(data = data_to_plot, aes(x = location_y, y = location_x, fill = xG), alpha = 0.8) +
scale_fill_gradientn(values = c(0, 1),
colours = c("grey15", "#440154FF", "#440154FF", "#3B528BFF", "#3B528BFF", "#21908CFF", "#21908CFF", "#5DC863FF", "#5DC863FF", "#FDE725FF", "#FDE725FF")) +
theme(legend.position = c(.5,.2),
legend.background = element_rect(fill = "grey15"),
legend.direction = "horizontal",
legend.text = element_text(color = "grey90", size = 8, family = "mono"),
legend.title = element_text(color = "grey90", size = 14, family = "mono", vjust = 0.8))
pitch
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred %>%
conf_mat(truth = is_goal, is_goal_pred) %>%
pluck(1) %>%
as_tibble() %>%
ggplot(aes(Prediction, Truth, alpha = n)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = n), colour = "white", alpha = 1, size = 8)
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
shots_ext$is_goal <- factor(shots_ext$is_goal, levels = c("1", "0"))
set.seed(seed = 1972)
train_test_split <- initial_split(data = shots_ext, prop = 0.80)
train_data <- train_test_split %>% training()
test_data  <- train_test_split %>% testing()
xg_recipe <-
recipe(is_goal ~ distance + angle + location_x + location_y, data = train_data) %>%
update_role(location_x, location_y, new_role = "ID")
model <- logistic_reg() %>%
set_engine("glm")
xg_wflow <-
workflow() %>%
add_model(model) %>%
add_recipe(xg_recipe)
library(dbplyr) # database access
library(DBI) # database access
library(tidyverse) # dataframe manipulation
library(tidymodels) # data processing and modeling
source("../data/pitch_plots.r") # helper function to plot the pitch
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
matches <- tbl(con, "matches") %>%
filter(league %in% c("Germany", "England", "Spain", "Italy", "France")) %>%
filter(season %in% c("2016/2017", "2015/2016", "2014/2015")) %>%
collect()
DBI::dbDisconnect(con)
match_ids <- unique(matches$match_id)
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "~/Documents/Blog/Data/data.sqlite")
shots <- tbl(con, "events") %>%
filter(match_id %in% match_ids) %>%
filter(isShot == 1) %>%
collect()
DBI::dbDisconnect(con)
shots_ext <- shots %>%
mutate(isGoal = as.numeric(isGoal)) %>%
mutate(isGoal = if_else(is.na(isGoal), 0, isGoal)) %>%
rename(is_goal = isGoal) %>%
select(location_x, location_y, is_goal, qualifiers) %>%
filter(location_x > 50) %>%
rowwise() %>%
mutate(big_chance = if_else(grepl("BigChance", qualifiers), 1, 0)) %>%
mutate(header = if_else(grepl("Head", qualifiers), 1, 0)) %>%
mutate(from_corner = if_else(grepl("FromCorner", qualifiers), 1, 0)) %>%
mutate(from_fk = if_else(grepl("SetPiece", qualifiers), 1, 0)) %>%
mutate(direct_fk = if_else(grepl("DirectFreekick", qualifiers), 1, 0)) %>%
mutate(penalty = if_else(grepl("Penalty", qualifiers), 1, 0)) %>%
mutate(assisted = if_else(grepl("Assisted", qualifiers), 1, 0)) %>%
mutate(intentional_assist = if_else(grepl("IntentionalAssist", qualifiers), 1, 0)) %>%
mutate(fast_break = if_else(grepl("FastBreak", qualifiers), 1, 0)) %>%
ungroup() %>%
select(-qualifiers) %>%
filter(header == 0 & from_corner == 0 & from_fk == 0 & direct_fk == 0)
distance <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- abs(50 - y_pos)*y_meters/100
distance <- sqrt(x_shift*x_shift + y_shift*y_shift)
}
goal_angle <- function(x_pos, y_pos){
x_meters <- 95.4
y_meters <- 76.25
x_shift <- (100 - x_pos)*x_meters/100
y_shift <- (50 - y_pos)*y_meters/100
angle <- atan((7.32*x_shift)/(x_shift*x_shift + y_shift*y_shift - (7.32/2)*(7.32/2)))
angle <- ifelse(angle < 0, angle + pi, angle)
angle_degrees <- angle*180/pi
}
shots_ext <- shots_ext %>%
rowwise() %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) %>% # angle based on available goal mouth
ungroup()
shots_ext$is_goal <- factor(shots_ext$is_goal, levels = c("1", "0"))
set.seed(seed = 1972)
train_test_split <- initial_split(data = shots_ext, prop = 0.80)
train_data <- train_test_split %>% training()
test_data  <- train_test_split %>% testing()
xg_recipe <-
recipe(is_goal ~ distance + angle + location_x + location_y, data = train_data) %>%
update_role(location_x, location_y, new_role = "ID")
model <- logistic_reg() %>%
set_engine("glm")
xg_wflow <-
workflow() %>%
add_model(model) %>%
add_recipe(xg_recipe)
xg_fit <-
xg_wflow %>%
fit(data = train_data)
artificial_shots <- crossing(location_x = seq(50, 100, by = 0.5), location_y = seq(0, 100, by = 0.5)) %>%
mutate(distance = distance(location_x, location_y)) %>% # distance from goal mid-point
mutate(angle = goal_angle(location_x, location_y)) # angle based on available goal mouth
data_to_plot <- predict(xg_fit, artificial_shots, type = "prob") %>%
bind_cols(artificial_shots) %>%
rename("xG" = ".pred_1")
pitch <- create_opta_ShotMap(grass_colour = "grey15", line_colour = "#8F8F8F", background_colour = "grey10", goal_colour = "#000000") +
geom_tile(data = data_to_plot, aes(x = location_y, y = location_x, fill = xG), alpha = 0.8) +
scale_fill_gradientn(values = c(0, 1),
colours = c("grey15", "#440154FF", "#440154FF", "#3B528BFF", "#3B528BFF", "#21908CFF", "#21908CFF", "#5DC863FF", "#5DC863FF", "#FDE725FF", "#FDE725FF")) +
theme(legend.position = c(.5,.2),
legend.background = element_rect(fill = "grey15"),
legend.direction = "horizontal",
legend.text = element_text(color = "grey90", size = 8, family = "mono"),
legend.title = element_text(color = "grey90", size = 14, family = "mono", vjust = 0.8))
pitch
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred %>%
conf_mat(truth = is_goal, is_goal_pred) %>%
pluck(1) %>%
as_tibble() %>%
ggplot(aes(Prediction, Truth, alpha = n)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = n), colour = "white", alpha = 1, size = 8)
tibble(
"precision" =
precision(xg_pred, is_goal, is_goal_pred) %>%
select(.estimate),
"recall" =
recall(xg_pred, is_goal, is_goal_pred) %>%
select(.estimate)
) %>%
unnest(cols = c(precision, recall))
xg_pred %>%
conf_mat(truth = is_goal, is_goal_pred) %>%
pluck(1) %>%
as_tibble() %>%
ggplot(aes(Prediction, Truth, alpha = n)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = n), colour = "white", alpha = 1, size = 8)
xg_pred <-
predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(location_x, location_y, is_goal)) %>%
mutate(is_goal_pred = factor(if_else(.pred_1 >= 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
roc_curve(truth = is_goal, .pred_1) %>%
autoplot()
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.25, 1, 0), levels = c("1", "0")))
xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
xg_pred %>%
conf_mat(truth = is_goal, is_goal_pred) %>%
pluck(1) %>%
as_tibble() %>%
ggplot(aes(Prediction, Truth, alpha = n)) +
geom_tile(show.legend = FALSE) +
geom_text(aes(label = n), colour = "white", alpha = 1, size = 8)
tibble(
"precision" =
precision(xg_pred, is_goal, is_goal_pred) %>%
select(.estimate),
"recall" =
recall(xg_pred, is_goal, is_goal_pred) %>%
select(.estimate)
) %>%
unnest(cols = c(precision, recall))
xg_pred <-
predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(location_x, location_y, is_goal)) %>%
mutate(is_goal_pred = factor(if_else(.pred_1 >= 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
roc_curve(truth = is_goal, .pred_1) %>%
autoplot()
xg_pred <- predict(xg_fit, test_data, type = "prob") %>%
bind_cols(test_data) %>%
rename("xG" = ".pred_1") %>%
mutate(is_goal_pred = factor(if_else(xG > 0.5, 1, 0), levels = c("1", "0")))
xg_pred %>%
metrics(truth = is_goal, is_goal_pred) %>%
select(-.estimator) %>%
filter(.metric == "accuracy")
blogdown:::serve_site()
