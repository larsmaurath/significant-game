---
title: "R Notebook"
output: html_notebook
---

```{r Load Libraries, echo=FALSE, message=FALSE}
library("DBI")
library("plyr")
library("dplyr")
library("ggplot2")
library("zoo")
```

```{r Load Data, echo=FALSE, message=FALSE}
con <- dbConnect(RSQLite::SQLite(), dbname = '~/Documents/Jupyter/footballData.sqlite')

value_table <- dbGetQuery(con, 'SELECT * from Value')
injury_table <- dbGetQuery(con, 'SELECT * from Injuries')

dbDisconnect(con)
```

```{r Data Wrangling, echo=FALSE, message=FALSE}
#Filter table and reformat raw data

injury_table$team <- gsub(" \\(Detailansicht\\)", "", injury_table$team)
injury_table$match <- toupper(injury_table$match)

injury_table <- injury_table %>% filter(season %in% c("2017/2018", "2016/2017", "2015/2016", "2014/2015", "2013/2014"))

injury_table$match <- as.numeric(injury_table$match)

injury_table <- injury_table %>% 
  mutate(date = if_else(match < 19, as.POSIXct(paste(substr(season, start = 1, stop = 4), "0831", sep = ""), format = "%Y%m%d"), as.POSIXct(paste(substr(season, start = 6, stop = 9), "0131", sep = ""), format = "%Y%m%d")))

value_table$date <- as.POSIXct(value_table$date, format = "%d.%m.%Y")

```

```{r Merge Injury and Market Value, echo=FALSE, message=FALSE}
#Interpolate market value data to the dates of the injury data and join the two data sets

date_vector <- unique(unlist(injury_table$date))
  
my.func<- function(i) {
  estimate <- approx(i$date,
                     i$value,
                     xout = date_vector,
                     method = "constant", 
                     rule = 2)
  return(data.frame(date = estimate$x, value = estimate$y, player_id = unique(i$player_id)))  
}

int_value_table <- ddply(value_table, .(player_id),  my.func)

joined_df <- inner_join(injury_table, int_value_table, by = c("player_id", "date"))

```

```{r Prepare for Plot, echo=FALSE, message=FALSE}
#We are grouping the injury status into available and unavailable

joined_df <- joined_df %>%
  dplyr::filter(!(status %in% c("other team", "pausing" )))

joined_df$status_clean[joined_df$status %in% c("squad", "starting", "substituted", "suspended")] <- "available"
joined_df$status_clean[joined_df$status %in% c("injured")] <- "unavailable"

results <- joined_df %>% 
  dplyr::group_by(team, match, season, status_clean) %>% 
  dplyr::summarise(value = sum(value)) %>%
  dplyr::mutate(freq = value / sum(value))

results$date <- paste(results$season, results$match, sep = "_")

results$dummy <- "Each Bar Represents One Match"
#results$team <- "Real Madrid"

#results$match_id <- if_else(results$match == "AF", 1, if_else(results$match %in% c("VF", "Vf"), 2, if_else(results$match %in% #c("AF", "Af"), 3, if_else(results$match %in% c("HF", "Hf"), 3, if_else(results$match %in% c("FIN", "Fin"), 4, 0)))))


results <- results %>%
  dplyr::filter(!(status_clean %in% c("available")))

average <- mean(results[["freq"]], na.rm = TRUE)

```

```{r Plot Bundesliga, echo=FALSE, message=FALSE}
results_bundesliga <- results %>% filter(team %in% c("FC Bayern München", "Borussia Dortmund"))

theme_set(theme_bw())

p <- ggplot(data = results_bundesliga, aes(x = match)) + 
  geom_area(aes(y = rollmean(freq, 5, na.pad = TRUE), col = team, fill = team), position = position_dodge(1.0), alpha = 0.5) +
  geom_hline(yintercept = average, linetype = "dashed") +
  #annotate("text", min(results$match), 0.1481, vjust = +1.5, hjust = -1, label = "Average") +
  facet_grid(. ~ season) + 
  labs(title = "Percentage of Squad Injured - Bundesliga") + 
  labs(subtitle = "Weighted by Transfer Value | Dashed Line Shows European Average") + 
  coord_cartesian(ylim = c(0,0.4)) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme(plot.title = element_text(face = "bold")) +
  theme(axis.text.x = element_text(angle = 90, size = 11)) + 
  theme(axis.text.y = element_text(size = 11)) + 
  theme(axis.title.y = element_blank()) + 
  theme(axis.title.x = element_blank()) + 
  theme(legend.position = "bottom", legend.title = element_blank(), legend.spacing.x = unit(0.5, 'cm'), legend.text = element_text(size = 12))

p
```

```{r Plot Premier League, echo=FALSE, message=FALSE}
results_premier_league <- results %>% filter(team %in% c("FC Arsenal", "Manchester City"))

theme_set(theme_bw())

p <- ggplot(data = results_premier_league, aes(x = match)) + 
  geom_area(aes(y = rollmean(freq, 5, na.pad = TRUE), col = team, fill = team), position = position_dodge(1.0), alpha = 0.5) +
  geom_hline(yintercept = average, linetype = "dashed") +
  #annotate("text", min(results$match), 0.1481, vjust = +1.5, hjust = -1, label = "Average") +
  facet_grid(. ~ season) + 
  labs(title = "Percentage of Squad Injured - Premier League") + 
  labs(subtitle = "Weighted by Transfer Value | Dashed Line Shows European Average") + 
  coord_cartesian(ylim = c(0,0.4)) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme(plot.title = element_text(face = "bold")) +
  theme(axis.text.x = element_text(angle = 90, size = 11)) + 
  theme(axis.text.y = element_text(size = 11)) + 
  theme(axis.title.y = element_blank()) + 
  theme(axis.title.x = element_blank()) + 
  theme(legend.position = "bottom", legend.title = element_blank(), legend.spacing.x = unit(0.5, 'cm'), legend.text = element_text(size = 12))

p
```

```{r Plot La Liga, echo=FALSE, message=FALSE}
results_la_liga <- results %>% filter(team %in% c("Atlético Madrid", "FC Barcelona", "Real Madrid"))

theme_set(theme_bw())

p <- ggplot(data = results_la_liga, aes(x = match)) + 
  geom_area(aes(y = rollmean(freq, 5, na.pad = TRUE), col = team, fill = team), position = position_dodge(1.0), alpha = 0.5) +
  geom_hline(yintercept = average, linetype = "dashed") +
  #annotate("text", min(results$match), 0.1481, vjust = +1.5, hjust = -1, label = "Average") +
  facet_grid(. ~ season) + 
  labs(title = "Percentage of Squad Injured - La Liga") + 
  labs(subtitle = "Weighted by Transfer Value | Dashed Line Shows European Average") + 
  coord_cartesian(ylim = c(0,0.4)) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme(plot.title = element_text(face = "bold")) +
  theme(axis.text.x = element_text(angle = 90, size = 11)) + 
  theme(axis.text.y = element_text(size = 11)) + 
  theme(axis.title.y = element_blank()) + 
  theme(axis.title.x = element_blank()) + 
  theme(legend.position = "bottom", legend.title = element_blank(), legend.spacing.x = unit(0.5, 'cm'), legend.text = element_text(size = 12))

p
```

```{r Plot Serie A, echo=FALSE, message=FALSE}
results_serie_a <- results %>% filter(team %in% c("Juventus Turin"))

theme_set(theme_bw())

p <- ggplot(data = results_serie_a, aes(x = match)) + 
  geom_area(aes(y = rollmean(freq, 5, na.pad = TRUE), col = team, fill = team), position = position_dodge(1.0), alpha = 0.5) +
  geom_hline(yintercept = average, linetype = "dashed") +
  #annotate("text", min(results$match), 0.1481, vjust = +1.5, hjust = -1, label = "Average") +
  facet_grid(. ~ season) + 
  labs(title = "Percentage of Squad Injured - Serie A") + 
  labs(subtitle = "Weighted by Transfer Value | Dashed Line Shows European Average") + 
  coord_cartesian(ylim = c(0,0.4)) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme(plot.title = element_text(face = "bold")) +
  theme(axis.text.x = element_text(angle = 90, size = 11)) + 
  theme(axis.text.y = element_text(size = 11)) + 
  theme(axis.title.y = element_blank()) + 
  theme(axis.title.x = element_blank()) + 
  theme(legend.position = "bottom", legend.title = element_blank(), legend.spacing.x = unit(0.5, 'cm'), legend.text = element_text(size = 12))

p
```

```{r Plot Ligue 1, echo=FALSE, message=FALSE}
results_ligue_1 <- results %>% filter(team %in% c("FC Paris Saint-Germain"))

theme_set(theme_bw())

p <- ggplot(data = results_ligue_1, aes(x = match)) + 
  geom_area(aes(y = rollmean(freq, 5, na.pad = TRUE), col = team, fill = team), position = position_dodge(1.0), alpha = 0.5) +
  geom_hline(yintercept = average, linetype = "dashed") +
  #annotate("text", min(results$match), 0.1481, vjust = +1.5, hjust = -1, label = "Average") +
  facet_grid(. ~ season) + 
  labs(title = "Percentage of Squad Injured - Ligue 1") + 
  labs(subtitle = "Weighted by Transfer Value | Dashed Line Shows European Average") + 
  coord_cartesian(ylim = c(0,0.4)) + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme(plot.title = element_text(face = "bold")) +
  theme(axis.text.x = element_text(angle = 90, size = 11)) + 
  theme(axis.text.y = element_text(size = 11)) + 
  theme(axis.title.y = element_blank()) + 
  theme(axis.title.x = element_blank()) + 
  theme(legend.position = "bottom", legend.title = element_blank(), legend.spacing.x = unit(0.5, 'cm'), legend.text = element_text(size = 12))

p
```

```{r}
library(ggplot2)
theme_set(theme_classic())


ggplot(results, aes(match, team, fill = freq)) + 
  geom_tile(colour = "white") + 
  facet_grid(dummy~season) + 
  labs(x="", y="Season", title = "Injury Heatmap", subtitle="Percentage of squad injured (% of transfer value) - thesignificantgame.com", fill="Formation") + 
  theme(axis.title=element_blank(), axis.text.x=element_blank(), axis.ticks = element_blank()) + 
  guides(fill=guide_legend(nrow=1,byrow=TRUE)) + 
  scale_fill_gradient(low = "red", high = "green", labels = scales::percent) +
  theme(legend.position = "bottom", legend.title = element_blank(), legend.spacing = unit(rep(0.05, 1), "npc"))
```

